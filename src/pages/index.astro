---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import {
  SITE_TITLE,
  SITE_DESCRIPTION,
  NUM_BLOGS,
  NUM_LANGUAGES,
} from "../consts";

import FormattedDate from "../components/FormattedDate.astro";
import GoogleAnalytics from "../components/GoogleAnalytics.astro";

import { getCollection } from "astro:content";

import ResumeItem from "../components/Item.astro";

import { Icon } from "astro-icon";

import "../styles/global.css";

const projects = (await getCollection("project"))
  .filter((project) => project.data.display !== false);

const blog = (await getCollection("blog"))
  .filter((blog) => blog.data.display !== false)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, NUM_BLOGS);

// find the modal builtWith for all projects
const builtWith = projects.reduce((acc, project) => {
  if (!project.data.builtWith) {
    return acc;
  } else {
    project.data.builtWith.forEach((language) => {
      if (acc[language]) {
        acc[language] += 1;
      } else {
        acc[language] = 1;
      }
    });
    return acc;
  }
}, {});

// sort builtWith by frequency
builtWith.keys = Object.keys(builtWith).sort(
  (a, b) => builtWith[b] - builtWith[a]
);
builtWith.keys = builtWith.keys.slice(0, NUM_LANGUAGES);

// https://threejs.org/docs/#manual/en/introduction/Installation
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <GoogleAnalytics />
    <script>
      import * as THREE from "three";
      import { OrbitControls } from "three/addons/controls/OrbitControls.js";
      import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        1000
      );

      const renderer = new THREE.WebGLRenderer({
        antialias: true,
      });
      renderer.setClearColor(0x1111dd, 0);

      const dddView = document.getElementById("3d-view");
      dddView.appendChild(renderer.domElement);

      const controls = new OrbitControls(camera, renderer.domElement);
      const loader = new GLTFLoader();

      renderer.domElement.addEventListener("click", () => {
        controls.lock();
      });

      loader.load(
        "/scene.glb",
        function (gltf: any) {
          scene.add(gltf.scene);
          if (gltf.cameras.length > 0) {
            let newCamera = gltf.cameras[0];

            camera.fov = newCamera.fov;
            camera.aspect = newCamera.aspect;

            const width = dddView.clientWidth;
            const height = dddView.clientHeight;
            renderer.setSize(width, width / newCamera.aspect);

            camera.rotation.setFromQuaternion(newCamera.quaternion);


            camera.position.set(
              newCamera.position.x * 1.15, // todo: be more sketch of this line of code
              newCamera.position.y * 1.15,
              newCamera.position.z* 1.15
            );            
            camera.updateProjectionMatrix();

            controls.update();
          } else {
            alert("No cameras in the scene!");
          }

          console.log("added new cached");
        },
        function (progress: any) {
          console.log((progress.loaded / progress.total) * 100 + "% loaded");
        },
        function (error: any) {
          console.error(error);
        }
      );

      function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
      }
      animate();
    </script>
  </head>
  <body class="std-body">
    <main class="std-main">
      <Header title={SITE_TITLE} />

      <section
        class="col-span-5 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
      >
        <div class="flex flex-col justify-center py-5">
          <img
            src="handwritten_intro.svg"
            id="intro"
            class="py-4"
            alt="Handwritten"
            width="100%"
            height="auto"
          />

          <p>
            Computer science student interested in Human-Computer Interfaces
            and Artifical Inteligence. Enjoy building projects and writing
            informational blogs
          </p>
        </div>
        <div id="3d-view" class="lg:col-span-2"></div>
      </section>

      <section class="col-span-5">
        <h2 class="section">üí™ Experience</h2>

        <ul class="space-y-4">
          <ResumeItem
            title="Valedor Partners"
            description="Data Science Intern"
            href="https://valedorpartners.com/"
            src="/logos/valedor.jpeg"
          />
          <ResumeItem
            title="University of Virginia, School of Data Science"
            description="Research Assistant"
            href="https://datascience.virginia.edu/"
            src="/logos/uva_datascience.svg"
          />
        </ul>
      </section>
      <section class="col-span-5">
        <h2 class="section">üìö Education</h2>

        <ul class="space-y-4">
          <ResumeItem
            title="University of Virginia, School of Engineering and Applied Science"
            description="Bachelor of Science in Computer Science, Minor in Data Science ‚Äî 3.9 GPA"
            href="https://engineering.virginia.edu/"
            src="/logos/uva.svg"
          />
          <ResumeItem
            title="The Academy of Science and Technology @ The Woodlands College Park High School"
            description="STEM Magnet Program ‚Äî 5.29 W GPA, Summa Cum Laude"
            href="https://cpast.conroeisd.net"
            src="/logos/ast.jpeg"
          />
        </ul>
      </section>
      <section>
        <header>
          <h2 class="section">‚úÖ Projects</h2>
        </header>

        <div class="grid md:grid-cols-3">
          <!--Allow project filtering by languages, compute the mode of each languages-->

          <div>
            <script id="new">
              function handlePress(event) {
                let languages = document.getElementById("languages");
                let projects = document.getElementById("projects");
 
                if (event.target.getAttribute("data-highlighted") === "true") {
                  let sum = 0;

                  for (let i = 0; i < languages.childNodes.length; i++) {
                    if (
                      languages.childNodes[i].getAttribute(
                        "data-highlighted"
                      ) === "true"
                    ) {
                      if (languages.childNodes[i].id !== event.target.id) {
                        sum += 1;
                      }
                    }
                  }

                  if (sum === 0) {
                    languages.childNodes.forEach((child) => {
                      child.setAttribute("data-highlighted", "true");
                    });

                    projects.childNodes.forEach((child) => {
                      child.setAttribute("data-highlighted", "true");
                    });
                    return;
                  }
                }

                // unhightlight all buttons + highlight the right button
                languages.childNodes.forEach((child) => {
                  child.setAttribute("data-highlighted", "false");
                });

                const pressed = event.target;
                pressed.setAttribute("data-highlighted", "true");

                projects.childNodes.forEach((child) => {
                  child.getAttribute("data-technologies").includes(pressed.id)
                    ? child.setAttribute("data-highlighted", "true")
                    : child.setAttribute("data-highlighted", "false");
                });
              }
            </script>
            <p class="text-lg pt-4 pr-4">
              Filter my projects by langauge, library or framework used to build
              them.
            </p>
            <div id="languages" class="flex flex-wrap md:flex-col justify-between space-x-2 space-y-2 text-lg">
              {
                builtWith.keys.map((language) => (
                  <button
                    class="underline"
                    id={language}
                    onclick="handlePress(event)"
                    data-highlighted="true"
                  >
                    {language}
                  </button>
                ))
              }
            </div>
          </div>
          <ul id="projects" class="grid md:grid-cols-2 col-span-2">
            {
              projects.map((project) => (
                <li
                  class="group p-2 hover:border-2 hover:shadow-md rounded-md mr-4 -ml-2 m-1"
                  data-technologies={
                    project.data.builtWith && project.data.builtWith.join(",")
                  }
                  data-highlighted="true"
                >
                  <a href={`/project/${project.slug}`}>
                    <h3 class="text-lg font-bold">
                      {project.data.title}
                    </h3>
                    <p class="">
                      {project.data.description}
                    </p>
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </section>

      <section>
        <header class="flex justify-between items-center">
          <h2 class="section">üìù Blog</h2>
          <a class="flex group" href="/blog"
            >More articles<Icon
              class="w-6 group-hover:translate-x-1"
              pack="ion"
              name="arrow-forward-sharp"
            /></a
          >
        </header>
        <div class="grid md:grid-cols-3">
          <div class="self-center pr-4 text-lg mb-8">
            I occasionally like to write blog articles. Check them out!
          </div>
          <ul class="md:col-span-2 grid md:grid-cols-2">
            {
              blog.map((post) => (
                <li class="group p-2 hover:border-2 hover:shadow-md rounded-md mr-4 -ml-2 m-1">
                  <a href={`/blog/${post.slug}`}>
                    <h3 class="text-lg font-bold">{post.data.title}</h3>
                    <div class="opacity-80">
                      <FormattedDate date={post.data.pubDate} />
                    </div>
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </section>
      <Footer />
    </main>
  </body>
</html>
